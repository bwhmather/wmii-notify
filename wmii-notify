#!/usr/bin/env python
import os
import io
import re

import itertools
import random

import logging
import argparse

from threading import Thread
from queue import Queue

import dbus
from dbus import service
from dbus.mainloop.glib import DBusGMainLoop
import gobject


BUS_NAME = 'org.freedesktop.Notifications'
SERVICE_PATH = '/org/freedesktop/Notifications'

REASONS = dict(
    EXPIRED=1,
    DISMISSED=2,
    REQUESTED=3,
    UNDEFINED=4)


class NotificationService(service.Object):
    def __init__(self, open_notification, close_notification):
        self._open_notification = open_notification
        self._close_notification = close_notification

        bus_name = service.BusName(BUS_NAME, bus=dbus.SessionBus())
        super(NotificationService, self).__init__(bus_name, SERVICE_PATH)

    @service.method(BUS_NAME, in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        logging.info("GetServerInformation()")
        return ("wmii-notify-daemon", "wmii", "1.0", "1")

    @service.method(BUS_NAME, in_signature='', out_signature='as')
    def GetCapabilities(self):
        logging.info("GetCapabilities()")
        return ('body')

    @service.method(BUS_NAME, in_signature='susssasa{sv}i', out_signature='u')
    def Notify(self, app_name, replaces_id,
               app_icon, summary, body,
               actions, hints, timeout):
        logging.info("Notify({}, {}, {}, {}, {}, {}, {}, {})".format(
            app_name, replaces_id,
            app_icon, summary, body,
            actions, hints, timeout))
        try:
            return self._open_notification(app_name, replaces_id,
                                           app_icon, summary, body,
                                           actions, hints, timeout)
        except:
            logging.exception("error in Notify")
            raise

    @service.method(BUS_NAME, in_signature='u', out_signature='')
    def CloseNotification(self, id):
        logging.info("CloseNotification({})".format(id))
        try:
            self._close_notification(id, "REQUESTED")
        except:
            logging.exception("error in CloseNotification")
            raise

    @service.signal(BUS_NAME, signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        logging.info("NotificationClosed(id={}, {})".format(id_in, reason_in))

    @service.signal(BUS_NAME, signature='us')
    def ActionInvoked(self, id_in, action_key_in):
        logging.info("ActionInvoked({}, {})".format(id_in, action_key_in))


class NotificationManager(object):
    def __init__(self, mountpoint, side="right", priority=100,
                 low_colours=None, normal_colours=None, critical_colours=None):
        # random string to distinguish this notify server from others
        self._uid = random.randrange(16**8 - 1)

        self._side = side
        self._mountpoint = mountpoint

        self._priority = priority

        # iterator providing unique id's for each new notification
        self._notification_id = itertools.count(1)

        # map from notification id's to gobject timeout callback handles
        self._notification_timeouts = {}

        default_colours = (low_colours or
                           normal_colours or
                           critical_colours or
                           "#ffffff #000000 #aaaaaa")
        self.colours = (
            low_colours or default_colours,
            normal_colours or default_colours,
            critical_colours or default_colours)

        self._actions = Queue()
        self._dbus_service = NotificationService(self.open_notification,
                                                 self.close_notification)

        Thread(target=self._event_loop, daemon=True).start()

        Thread(target=self._action_loop, daemon=True).start()

    def _notification_filename(self, id):
        bar = {
            "left": "lbar",
            "right": "rbar",
        }[self._side]

        filename = "{priority:03}-{uid:08x}-notify-{id:08}".format(
            priority=self._priority,
            uid=self._uid,
            id=id)

        return os.path.join(self._mountpoint, bar, filename)

    def _event_loop(self):
        action = {
            "left": "LeftBarClick 1",
            "right": "RightBarClick 1",
        }[self._side]

        regex = re.compile(r"{} {:03}-{:08x}-notify-{}".format(
            action, self._priority, self._uid, "([0-9]{8})"))

        with open(os.path.join(self._mountpoint, "event")) as events:

            while True:
                event = events.readline()
                match = regex.match(event)
                if match:
                    self._actions.put((self.close_notification,
                                       (int(match.group(1)),),
                                       dict(reason="DISMISSED")))

    def _action_loop(self):
        while True:
            action, args, kwargs = self._actions.get()
            try:
                action(*args, **kwargs)
            except:
                logging.exception("error invoking action")

    def _open_notification(self, app_name, id,
                           app_icon, summary, body,
                           actions, hints, timeout):
        filename = self._notification_filename(id)

        urgency = max(0, min(hints.get('urgency', 1), 2))
        colours = self.colours[urgency]

        with io.open(filename, "wb") as button:
            button.write(" ".join([colours, summary]).encode("utf-8"))

        if timeout > 0:
            self._notification_timeouts[id] = gobject.timeout_add(
                timeout, self.close_notification, id, "EXPIRED")

    def open_notification(self, app_name, id, *args, **kwargs):
        if not id:
            id = next(self._notification_id)

        self._actions.put((self._open_notification,
                          (app_name, id) + args,
                          kwargs))
        return id

    def _close_notification(self, id, reason="UNDEFINED"):
        logging.info("closing notification with id: {}, reason: {}".format(
            id, reason))
        if id in self._notification_timeouts:
            del self._notification_timeouts[id]

        filename = self._notification_filename(id)

        os.unlink(filename)

        self._dbus_service.NotificationClosed(id, REASONS[reason])

    def close_notification(self, *args, **kwargs):
        self._actions.put((self._close_notification, args, kwargs))


def main():
    parser = argparse.ArgumentParser(
        description="Write notifications to the wmii menu bar.")
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="print debug information")
    parser.add_argument(
        "--side", default="right",
        help="what side of the bar to put notifications")
    parser.add_argument(
        "--mountpoint", metavar="DIR", default=None,
        help="the path of the root of the wmii filesystem is located")
    parser.add_argument(
        "--priority", metavar="N", type=int, default=100,
        help="three digit number used to determine order of messages " +
             "created by this instance on menu bar")
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if args.mountpoint is None:
        mountpoint = "/tmp/ns.{user}.{display}/wmii-mount".format(
            display=re.sub(r"\.0$", "", os.environ.get("DISPLAY")),
            user=os.environ.get("USER"))
    else:
        mountpoint = os.path.abspath(args.mountpoint)

    side = args.side
    if side not in ("left", "right"):
        raise Exception(
            "side should be either 'left' or 'right'")

    priority = args.priority
    if priority < 0 or priority > 999:
        raise Exception(
            "priority should be an integer between 0 and 999")

    gobject.threads_init()
    DBusGMainLoop(set_as_default=True)

    NotificationManager(mountpoint=mountpoint, side=side, priority=priority)

    mainloop = gobject.MainLoop()
    mainloop.run()

if __name__ == "__main__":
    main()
